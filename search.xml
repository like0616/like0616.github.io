<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GEM</title>
    <url>/2022/06/02/GEM/</url>
    <content><![CDATA[<p> G.E.M</p>
<img src="/2022/06/02/GEM/gem4.jfif" style="zoom: 25%;">

<p>邓紫棋（G.E.M.），本名邓诗颖，1991年8月16日出生于上海市，中国香港流行乐女歌手、词曲作者、音乐制作人。</p>
<span id="more"></span>

<p>2008年，发行个人首张音乐EP《<a href="https://baike.baidu.com/item/G.E.M./17909097">G.E.M.</a>》，凭该EP获得香港叱咤乐坛流行榜“叱咤乐坛生力军女歌手（金奖）” [21] 。2009年，发行个人首张音乐专辑《<a href="https://baike.baidu.com/item/18/12698445">18</a>》。2011年，成为首位登上香港体育馆开唱的90后华语女歌手 [3] 。2013年，凭借音乐专辑《<a href="https://baike.baidu.com/item/Xposed/6483085">Xposed</a>》入围第24届台湾金曲奖“最佳国语女歌手奖” [5] ，并获得IFPI香港唱片销量大奖“全年最高销量女歌手奖”和“最高销量国语唱片奖” [4] ；同年，举行<a href="https://baike.baidu.com/item/%E9%82%93%E7%B4%AB%E6%A3%8B%E2%80%9CX.X.X.%E2%80%9D%E4%B8%96%E7%95%8C%E5%B7%A1%E5%9B%9E%E6%BC%94%E5%94%B1%E4%BC%9A/56711467">邓紫棋“X.X.X.”世界巡回演唱会</a>。2014年，获得湖南卫视歌唱真人秀节目《<a href="https://baike.baidu.com/item/%E6%88%91%E6%98%AF%E6%AD%8C%E6%89%8B%E7%AC%AC%E4%BA%8C%E5%AD%A3/1748631">我是歌手第二季</a>》总决赛亚军 [6] ；同年，获得第27届<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E5%84%BF%E7%AB%A5%E9%80%89%E6%8B%A9%E5%A5%96/10645693">美国儿童选择奖</a>“最受欢迎亚洲艺人奖” [7] 。</p>
<p>2015年，登上<a href="https://baike.baidu.com/item/2015%E5%B9%B4%E4%B8%AD%E5%A4%AE%E7%94%B5%E8%A7%86%E5%8F%B0%E6%98%A5%E8%8A%82%E8%81%94%E6%AC%A2%E6%99%9A%E4%BC%9A/7059749">2015年中央电视台春节联欢晚会</a>，弹唱歌曲《<a href="https://baike.baidu.com/item/%E5%A4%9A%E8%BF%9C%E9%83%BD%E8%A6%81%E5%9C%A8%E4%B8%80%E8%B5%B7/16798968">多远都要在一起</a>》 [8] ；同年，位列《<a href="https://baike.baidu.com/item/2015%E5%B9%B4%E7%A6%8F%E5%B8%83%E6%96%AF%E4%B8%AD%E5%9B%BD%E5%90%8D%E4%BA%BA%E6%A6%9C/17555803">2015年福布斯中国名人榜</a>》第11名 [9] 。2016年，入选<a href="https://baike.baidu.com/item/%E7%A6%8F%E5%B8%83%E6%96%AF/301065">福布斯</a>《全球30岁以下最具潜力音乐人榜单》 [10] ；同年，获得“<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E6%9D%B0%E5%87%BA%E5%8D%8E%E4%BA%BA%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%A5%96/58350089">世界杰出华人青年大奖</a>” [62] 。2017年，入选票务平台StubHub“全球十大巡演票房畅销女歌手” [71] 。2018年，成为美国国家航空航天局“<a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E7%AA%81%E7%A0%B4%E5%A5%96/12710301">科学突破奖</a>”首位亚洲颁奖女艺人 [12] ；同年，入选英国广播公司BBC发布的《全球最具影响力百大女性榜单》 [13] 。2019年，《<a href="https://baike.baidu.com/item/%E5%85%89%E5%B9%B4%E4%B9%8B%E5%A4%96/20318525">光年之外</a>》MV在视频平台YouTube突破2亿次点击量 [14] 。2020年，凭借音乐专辑《<a href="https://baike.baidu.com/item/%E6%91%A9%E5%A4%A9%E5%8A%A8%E7%89%A9%E5%9B%AD/24201718">摩天动物园</a>》获得第31届台湾金曲奖“评审团奖” [15] ；同年，获得Mnet亚洲音乐大奖“最佳亚洲艺人奖” [16] 。</p>
]]></content>
      <categories>
        <category>GEM</category>
      </categories>
      <tags>
        <tag>GEM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>python类</title>
    <url>/2022/06/01/python%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="什么是面向对象编程"><a href="#什么是面向对象编程" class="headerlink" title="什么是面向对象编程"></a>什么是面向对象编程</h3><p>1、面向对象编程(oop)是一种程序设计思想。oop把对象作为程序的基本单元，一个对象包含数据和操作数据的函数</p>
<p>2、在python中，所有数据类型都被视为对象，也可以自定义对象。自定义对象数据类型就是面向对象中类的概念</p>
<span id="more"></span>

<h3 id="面向对象术语简介"><a href="#面向对象术语简介" class="headerlink" title="面向对象术语简介"></a>面向对象术语简介</h3><p>1、类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例</p>
<p>2、方法：类中定义的函数</p>
<p>3、类变量(属性)：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体(方法)之外。类变量通常不作为实例变量使用，类变量也称作属性</p>
<p>4、数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据</p>
<p>5、方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</p>
<p>6、实例变量：定义在__init__方法中的变量，只作用于当前实例的类</p>
<p>7、继承：即一个派生类(derived class)继承基类(base class)的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待,以普通的类为基础建立专门的类对象</p>
<p>8、实例化：创建一个类的实例，类的具体对象。一个类可以实例化出无数个对象</p>
<p>9、对象：通过类定义的数据结构实例。对象包括两个数据成员(类变量和实例变量)和方法</p>
<p>10、多态：对不同类的对象使用同样的操作</p>
<p>11、封装：对外部世界隐藏对象的工作细节</p>
<h2 id="Python类"><a href="#Python类" class="headerlink" title="Python类"></a>Python类</h2><p>1、类提供了一种组合数据和功能的方法。创建一个新类意味着创建一个新的对象类型，从而允许创建一个该类型的新实例</p>
<p>2、每个类的实例可以拥有保存自己状态的属性。一个类的实例也可以有改变自己状态的（定义在类中的）方法</p>
<p>3、Python的类提供了面向对象编程的所有标准特性：<br>    ⑴类继承机制允许多个基类，派生类可以覆盖它基类的任何方法，一个方法可以调用基类中相同名称的的方法<br>    ⑵对象可以包含任意数量和类型的数据<br>    ⑶和模块一样，类也拥有Python天然的动态特性：它们在运行时创建，可以在创建后修改</p>
<h3 id="Python类的定义"><a href="#Python类的定义" class="headerlink" title="Python类的定义"></a>Python类的定义</h3><p>1、python中定义类使用class关键字，class后面紧接类名，类名通常是大写开头的单词(无类继承时类名后可以加括号也可以不加括号)</p>
<p>2、python中类的定义语法如下：</p>
<pre><code>class ClassName:
    语句1
    ...
    语句n
</code></pre>
<p>注：<br>1、类定义与函数定义(def语句)一样：只有在被执行才会起作用<br>    ⑴在定义阶段只是语法检查</p>
<p>2、类是属性和方法的组合，所以语句1可能是内部变量(数据、属性)的定义和赋值语句，也可能是内部方法(函数)的定义语句<br>    ⑴一个对象的特征称为”属性”<br>    ⑵一个对象的行为称为”方法”<br>    ⑶属性在代码层面上来看就是变量，方法实际就是函数，通过调用这些函数来完成某些工作</p>
<p>3、进入类定义时，就会创建一个新的命名空间，并把它用作局部作用域<br>    ⑴因此，所有对局部变量的赋值都是在这个新命名空间内进行的。特别的，函数定义会绑定到这个局部作用域里的新函数名称</p>
<p>4、正常离开(从结尾出)类定义时，就会创建一个类对象<br>    ⑴它基本上是一个包围在类定义所创建的命名空间内容周围的包装器<br>    ⑵元素的(在进入类定义之前起作用的)局部作用域将重新生效，类对象将在这里被绑定到类定义头给出的类名称(在上面的例子中就是ClassName)</p>
<p>例1：</p>
<p>class MyClass:<br>    “””定义一个MyClass类”””<br>    i &#x3D; 12345</p>
<pre><code>def func(self):
    return &#39;hello world&#39;
</code></pre>
<p>注：<br>1、类包含属性和方法<br>    ⑴属性：分为类属性和实例属性<br>        ①”i &#x3D; 12345”：表示定义了一个类属性i其值为12345(实例属性后面介绍)<br>    ⑵方法：即定义在类中的函数(与普通的函数类似)<br>        ②func：表示定义了一个名为func的实例方法，实际上就是一个稍微特殊点的函数(方法的第一个参数必须为self)</p>
<p>2、在类中定义方法的形式和函数差不多，但其不称为函数，而是叫方法。方法的调用需要绑定到特定的对象上(通过self.或实例对象名)，而函数不需要<br>    ⑴类内部的函数定义通常具有一种特别形式的参数列表，这个特别形式就是第一个参数必须是self(self参数后面介绍)<br>    ⑵方法是所有实例都共用的：类外所有实例都可以调用类中的方法，类中方法之间也可以相互调用</p>
<p>3、上面例子中创建了一个MyClass抽象类，定义好类后会在当前作用域定义名字MyClass，指向类对象MyClass</p>
<p>4、类也是一种对象类型，跟前面学习过的数值、字符串、列表等等是一样的<br>    ⑴比如这里构建的类名字叫做MyClass，那么就是我们要试图建立一种对象类型，这种类型被称之为MyClass，就如同有一种对象类型是list一样</p>
<p>5、Python中一切皆对象。不管是我们自己定义的类、6种基本数据类型还是内置的类(第三方类)等都称作为对象<br>    ⑴一个对象，就会拥有自己的属性和方法。我们可以通过一定的方式来调用一个对象的属性和方法。这一点自定义类与其他Python类型是一样的</p>
<p>6、Python类中的方法分为：实例方法、类方法、静态方法。这里主要介绍实例方法(方法中第一个参数必须为self)，感觉其他两种方法用的比较少</p>
<h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p>1、类是抽象的概念，它是一种数据结构：就好比一个模型，该模型是生活中具有相同属性(特征)和方法(动作)的同一类事务，可以用它来生产真实的物体(实例)<br>    ⑴在python中，把具有相同属性和方法的对象归为一个类(class)</p>
<p>2、比如，我们可以将类看做是一个”饼干模具”，这个模具上有一些饼干的特征(属性)和行为(方法)<br>    ⑴有了这个模具之后我们就可以通过这个模块来制作很多具有相同属性和行为的不同饼干了(制作出来的肯定不是同一块饼干)</p>
<p>3、定义一个类后，就相当于有了一个类对象了：Python中”一切皆对象”。类也称为”类对象”<br>    ⑴比如前面例1中定义了类MyClass，其也可以成为类对象</p>
<p>4、类对象支持两种操作：属性引用和实例化<br>    ⑴实例化：使用instance_name &#x3D; class_name()的方式实例化，实例化操作创建该类的实例(格式：实例对象名 &#x3D; 类名()，实例对象名是我们自己定义的)<br>    ⑵属性引用：使用class_name.attr_name的方式引用类属性(类名.属性名)</p>
<p>例2：属性引用</p>
<p>class MyClass:<br>    “””定义一个MyClass类”””<br>    i &#x3D; 12345</p>
<pre><code>def func(self):
    return &#39;hello world&#39;
</code></pre>
<p>print(MyClass.i) # 引用类属性<br>print(MyClass.func) # 引用实例方法：实例方法可以这样被引用，但是这样引用无意义(知道即可)</p>
<h4 id="类属性也可以被赋值，因此可以通过赋值来更改类属性的值"><a href="#类属性也可以被赋值，因此可以通过赋值来更改类属性的值" class="headerlink" title="类属性也可以被赋值，因此可以通过赋值来更改类属性的值"></a>类属性也可以被赋值，因此可以通过赋值来更改类属性的值</h4><p>MyClass.i &#x3D; 123<br>print(MyClass.i)</p>
<p>“””<br>12345<br>&lt;function MyClass.func at 0x00000229FB3F0840&gt;<br>123<br>“””<br>例2_1：实例化</p>
<p>class MyClass:<br>    “””定义一个MyClass类”””<br>    i &#x3D; 12345</p>
<pre><code>def func(self):
    return &#39;hello world&#39;
</code></pre>
<p>#实例化一个类<br>my_class &#x3D; MyClass()<br>print(my_class)</p>
<p>&lt;main.MyClass object at 0x0000025C05DFE4A8&gt;</p>
<p>#可以看到实例化类后返回的是一个MyClass对象，这个对象跟python中的数字、字符串、列表等是一样的<br>#对象都可以拥有属性、方法<br>注：<br>1、类的实例化：是使用函数表示法，可以把类对象看做是会返回一个新的类实例的函数<br>    ⑴比如上面类对象的实例化就是：my_class &#x3D; MyClass()。这就创建了一个类的新实例并将此对象分配给局部变量my_class</p>
<p>2、实例化操作可以看成是”调用”类对象：将一个类实例化后获得的对象(所赋值的变量)称为实例对象。my_class就称为实例对象</p>
<p>3、类只是一个抽象的概念，只有经过实例化后(获得实例对象)，才会有意义，才能正常使用这个类中的属性和方法</p>
<h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><p>1、实例对象就是具有类属性和方法的具体事物：是基于类而创建的一个具体的事物<br>    ⑴比如类可以看做制作饼干的模板，那么通过这个模板制作出来的一块块饼干就是实例对象</p>
<p>2、通过类产生实例对象的过程称为实例化<br>    ⑴格式：实例对象名 &#x3D; 类名()<br>    ⑵通过简单的赋值操作，就实例化了一个对象，得到一个实例对象</p>
<p>3、一个类可以实例化出无数个实例对象：这些实例对象之间的属性和方法都是独立的，互不干扰<br>    ⑴一个饼干模具可以生产出无数块饼干</p>
<p>4、实例对象是类对象实例化的产物，实例对象仅支持一个操作：属性引用<br>    ⑴实例对象名.属性名<br>    ⑵实例对象名.方法名()</p>
<p>例3：</p>
<p>class MyClass:<br>    “””定义一个MyClass类”””<br>    i &#x3D; 12345</p>
<pre><code>def func(self):
    return &#39;hello world&#39;
</code></pre>
<p>#第一个实例对象<br>my_class &#x3D; MyClass()<br>print(id(my_class))<br>print(my_class.i)   # 引用类属性<br>print(my_class.func()) # 引用实例方法</p>
<p>#第二个实例对象<br>my_class1 &#x3D; MyClass()<br>print(id(my_class1))</p>
<h3 id="类属性重新赋值"><a href="#类属性重新赋值" class="headerlink" title="类属性重新赋值"></a>类属性重新赋值</h3><p>my_class1.i &#x3D; 123<br>print(my_class1.i)   # 引用类属性<br>print(my_class1.func()) # 引用实例方法</p>
<p>#第三个实例对象<br>my_class2 &#x3D; MyClass()<br>print(id(my_class2))<br>print(my_class2.i)   # 引用类属性<br>print(my_class2.func()) # 引用实例方法</p>
<p>“””<br>2205374276776<br>12345<br>hello world<br>2205374276552<br>123<br>hello world<br>2205374279632<br>12345<br>hello world<br>“””<br>注：<br>1、一个类可以实例化出无数个实例对象：这些实例对象之间的属性和方法都是独立的，互不干扰<br>    ⑴my_class、my_class1、my_class2…这些都是通过MyClass类实例化后得到的实例对象，他们之间是互不干扰的</p>
<p>2、在未实例化类时(my_class &#x3D; MyClass()前)，只是定义了类对象的属性和方法，此时其还不是一个完整的对象，将定义的这些称为类(抽象类)。需要使用类来创建一个真正的对象，这个对象就叫做这个类的一个实例，也叫作实例对象(一个类可以有无数个实例)</p>
<p>3、创建一个对象也叫做类的实例化，即my_class &#x3D; MyClass()(此时得到的my_class变量称为类的具体对象)。注意此时类名后面是跟着小括号的，这跟调用函数一样<br>    ⑴另外赋值操作是必须的，但如果没有将创建好的实例对象赋值给一个变量，那这个对象就没办法使用，因为没有任何引用指向这个实例(其实也可以说赋值操作是必须的)</p>
<p>4、使用class语句只能创建一个类，而无法创建类的实例对象，因此要想使用已创建好的类，还需要手动创建类的实例对象，创建类对象的过程又称为类的实例化</p>
<p>例3_1：</p>
<p>“””这种写法知道就好了，实际中肯定不能这么写：未进行赋值操作！！！！！”””<br>class MyClass:<br>    “””定义一个MyClass类”””<br>    i &#x3D; 12345</p>
<pre><code>def __init__(self,name):
    self.name = name










def func(self):
    print(self)
    print(&quot;名字是：%s&quot; % self.name)
</code></pre>
<h1 id="未进行赋值操作"><a href="#未进行赋值操作" class="headerlink" title="未进行赋值操作"></a>未进行赋值操作</h1><p>print(MyClass(“张三”).i)   # 引用类属性<br>print(MyClass(“张三”).func()) # 引用实例方法</p>
<p>print(MyClass(“李四”).i)   # 引用类属性<br>print(MyClass(“李四”).func()) # 引用实例方法</p>
<p>“””<br>12345<br>&lt;__main__.MyClass object at 0x000001356F83D780&gt;<br>名字是：张三<br>None<br>12345<br>&lt;__main__.MyClass object at 0x000001356F83D780&gt;<br>名字是：李四<br>None<br>“””<br>注：<br>1、如果在实例化类时，未将实例赋值给一个变量：虽然可以正常调用类的属性和方法<br>    ⑴但是这样是没有意义的。因为：没有任何引用指向这个实例，都没法调用这个实例(只有赋值后才会产生实例对象)</p>
<p>2、如果这样写的话，每次调用这个类的实例对象都需要去实例化一次了，那么就显得很麻烦了，还不如实例化一次并赋值给一个变量，此后每次去调用这个变量(实例对象)就好了</p>
<p>3、因此：类在使用前必须先实例化，并将实例赋值给一个变量(得到实例对象)</p>
<p>self参数<br>1、在定义实例变量、实例方法时的第一个参数必须是self<br>    ⑴其实：self名称不是必须的，在python中self不是关键词，你可以定义成a或b或其它名字都可以，只是约定成俗都使用了self<br>    ⑵也就是说在定义实例方法时必须有一个参数是默认已经存在了的，可以是self，可以是a，也可以是b。不管这个参数名是什么，但必须得有这个参数</p>
<p>2、self在定义时需要定义，但是在调用时会自动传入(不需要手动传入了)</p>
<p>3、self其实就相当于C++中的this指针</p>
<p>4、如果把类比作图纸，那么由类实例化后的对象才是真正可以住人的房子。根据一张图纸就可以设计出成千上万的房子，他们都长得差不多，但他们都有不同的主人，每个人都只能回自己的家里…..所以self这里就相当于每个房子的门牌号，有了self就可以轻松找到自己房子</p>
<p>5、python中的self参数就是同一个道理，由同一个类可以生成无数对象，当一个对象的方法被调用的时候，对象会将自身的引用作为第一个参数传给该方法，那么python就知道需要操作哪个对象的方法了</p>
<p>6、简单的来说就是：self代表的当前的实例对象本身，这样在调用实例方法等时Python就知道当前是哪个实例对象了<br>    ⑴一个抽象类实例化后，实例对象为a，那么此时self就代表实例对象a<br>    ⑵一个抽象类实例化后，实例对象为b，那么此时self就代表实例对象b</p>
<p>例4：</p>
<p>class MyClass:<br>    “””定义一个MyClass类”””<br>    i &#x3D; 12345</p>
<pre><code>def func(self):
    print(&quot;self参数：&quot;,self)
    return &#39;hello world&#39;
</code></pre>
<p>a &#x3D; MyClass()<br>print(“实例对象：”,a)<br>a.func()</p>
<p>b &#x3D; MyClass()<br>print(“实例对象：”,b)<br>b.func()</p>
<p>“””<br>实例对象： &lt;__main__.MyClass object at 0x000002D29354E3C8&gt;<br>self参数： &lt;__main__.MyClass object at 0x000002D29354E3C8&gt;<br>实例对象： &lt;__main__.MyClass object at 0x000002D29354EFD0&gt;<br>self参数： &lt;__main__.MyClass object at 0x000002D29354EFD0&gt;<br>“””<br>注：<br>1、通过打印的id值可以看出，self参数实际上就是类通过实例化后得到的实例对象。不同的实例对象对应的self参数是不一样的(self参数始终与当前实例对象时一一对应的)</p>
<p>2、在这个例子可中可能并不能很好的理解self参数的含义，感觉是实例变量中能更好的理解self参数</p>
<p>3、目前我们只需记住：<br>    ⑴实例方法第一个参数必须是self，在调用时会自动传入(不需要手动传入了)<br>    ⑵self代表的当前的实例对象本身</p>
<p>例4_1：</p>
<p>class Ball:<br>    def setname(self,name,age):<br>        self.name &#x3D; name<br>        print(age)</p>
<pre><code>def kick(self):
    return &quot;我叫%s&quot; % self.name
</code></pre>
<p>a &#x3D; Ball()<br>b &#x3D; Ball()<br>c &#x3D; Ball()</p>
<p>a.setname(“A”,1)<br>b.setname(“B”,2)<br>c.setname(“C”,3)</p>
<p>print(a.kick())<br>print(b.kick())<br>print(c.kick())</p>
<p>“””<br>1<br>2<br>3<br>我叫A<br>我叫B<br>我叫C<br>“””<br>注：从上面例子可以看出</p>
<p>1、有Ball类生成了三个实例对象a,b,c，这三个对象在调用kick()方法时，是通过self参数去确定究竟当前是哪个对象在调用方法的。因此在写实例方法时一定要写self参数且其位置在第一个，在调用时就不需要传入self参数了</p>
<p>2、在方法中定义的参数，一般来说只能在当前方法中使用(作用域)<br>    ⑴如果想要一个方法中的参数能在其他方法中使用，那么就可以使用”self.”来将这个参数变成一个实例变量(实例变量后面介绍，这里主要是遇到了这种写法)<br>    ⑵name参数：在方法中使用了”self.name &#x3D; name”，这步就相当于是将这个name参数变成了一个实例变量，因此可以在所有方法中使用(这种写法了解即可，没啥意义，因为一个实例变量最好直接定义在__init__方法中)<br>    ⑶age参数：age参数就没有使用name参数那样的写法，仅仅是在setname()方法中定义并使用，因此age参数就只能在setname()方法中使用，而不能在kick()方法中使用，即使他们是在同一个类中(经常遇到的是这种写法)</p>
<p>类变量<br>1、类变量：是该类所有实例对象共享的属性(也可以叫”类属性”)<br>    ⑴类属性是所有实例都共用的：所有实例都可以调用这个类属性<br>    ⑵在类中任意地方(所有方法中)都可以使用”类名.类属性名”来调用类属性<br>    ⑶在类外任意地方都可以使用”类名.类属性名”或”实例名.类属性名”来调用类属性</p>
<p> 2、类变量是直接定义在类中的，比如例1中的”i &#x3D; 12345”，变量i就是一个类属性，该变量是所有实例对象共有的。类中的所有方法、实例都可以使用它</p>
<p>例5：</p>
<p>class Car():<br>    “””这是一个汽车类”””<br>    brand &#x3D; “宝马”</p>
<pre><code>def run(self, s):
    # 类中调用类属性：类名.属性名
    print(&quot;当前车型为：%s,当前行驶速度：%s KM/S&quot; % (Car.brand,s))
</code></pre>
<p>a &#x3D; Car()</p>
<h1 id="类外调用类属性：实例名-属性名"><a href="#类外调用类属性：实例名-属性名" class="headerlink" title="类外调用类属性：实例名.属性名"></a>类外调用类属性：实例名.属性名</h1><p>print(a.brand, id(a.brand))<br>a.run(110)</p>
<p>b &#x3D; Car()<br>print(b.brand, id(b.brand))<br>b.run(200)</p>
<p>“””<br>宝马 1744629351728<br>当前车型为：宝马,当前行驶速度：110 KM&#x2F;S<br>宝马 1744629351728<br>当前车型为：宝马,当前行驶速度：200 KM&#x2F;S<br>“””<br>实例变量<br>1、类变量是所有实例公用的属性。也就是说一些属性是所有实例都共有的，那么此时我们可以将该属性定义为类属性<br>    ⑴那么如果某些属性是每个实例独有的(每个实例的属性值都不一致)，那么我们就可以将这些属性定义为实例属性</p>
<p>2、实例变量：是每个实例都独有的数据(也可以叫”实例属性”)<br>    ⑴即某个属性对于每个实例都是独有的，就需要将其定义为实例变量<br>    ⑵某个属性是每个实例同共有的就可以定义为类属性</p>
<p>3、实例变量是定义在__init__方法中的<br>    ⑴__init__()方法也是类中的一个方法，因此其第一个参数也必须是self<br>    ⑵实例变量是每个实例对象独有的，因此在定义实例变量时，必须是：self.实例变量名 &#x3D; 外部形参名(通过self来绑定当前实例对象)<br>    ⑶在类中任意地方(所有方法中)都可以使用”self.实例属性名”来调用实例属性<br>    ⑷在类外任意地方都可以使用”实例名.实例属性名”来调用实例属性</p>
<p>例6：</p>
<p>class People():<br>    country &#x3D; “china”</p>
<pre><code>def __init__(self,name):
    self.name = name
 
def speak(self, age):
    # 类中调用类属性：类名.属性名
    # 类中调用实例属性：self.属性名
    print(&quot;我的名字是：%s,来自：%s，年龄是：%s&quot; % (self.name,People.country,age))
</code></pre>
<h1 id="实例化类时传入实例变量值"><a href="#实例化类时传入实例变量值" class="headerlink" title="实例化类时传入实例变量值"></a>实例化类时传入实例变量值</h1><p>a &#x3D; People(“Tom”)<br>a.speak(11)</p>
<p>b &#x3D; People(“Jack”)<br>b.speak(12)</p>
<p>“””<br>我的名字是：Tom,来自：china，年龄是：11<br>我的名字是：Jack,来自：china，年龄是：12<br>“””<br>注：<br>1、上面例子中定义了一个类属性”country”，是所有实例共有的；定义了一个实例属性”name”，是每个实例独有的</p>
<p>2、一个类中存在实例变量(定义了init方法且init方法中存在形参)时，那么在实例化类时就需要传入对应的实参，否则会报错</p>
<p>3、实例方法、类方法、静态方法中可以有自己参数(例子中的参数age)，方法中的参数的作用域为方法本身内部(只能在该方法中使用，即使是同一个类中的不同方法，也不能使用)<br>    ⑴方法中的参数类型与普通函数的参数类型是一样的(只是第一个参数必须是self)。可以是位置参数(必填参数)、关键字参数、默认参数、可变参数等<br>    ⑵如果方法中定义了一些参数，那么在调用这些方法时就必须传入对应参数的值了</p>
<p>4、上面实例化了两个实例对象a、b，在方法speak()中都调用了实例属性name。那么Python是怎么确定当前实例变量name的值是”Tom”或”Jack”的呢？其实就是通过self参数来确定的：一个类可以实例化出无数个实例对象，通过self参数来确定当前是哪个实例对象在调用了<br>    ⑴比如当前为实例对象a在调用时，此时self参数就表示实例对象a，此时Python就去找实例对象a的实例属性name的值<br>    ⑵比如当前为实例对象b在调用时，此时self参数就表示实例对象b，此时Python就去找实例对象b的实例属性name的值<br>    ⑶这样就不会出现什么，实例对象a在调用，但找的是实例对象b的实例属性值了</p>
<p>5、在类中是不可能出现实例对象名的(实例对象是实例化后才产生的)，因此在类中使用self参数来表示实例对象<br>    ⑴类中的self参数就相当于一个形参，当类实例化后，实例对象就相当于self参数的实参<br>    ⑵哪个实例对象在调用，self参数就表示哪个实例对象</p>
<p>6、self.name &#x3D; name表示：将外部传来的变量name的值赋值给当前实例对象的name属性(两个name之间无任何关系，只是变量名一致)<br>    ⑴name：只是一个形参，用来接收外部传入的实参值<br>    ⑵self.name：表示当前实例对象的实例属性(当前是哪个实例对象，就表示哪个实例对象的实例属性)</p>
<p>7、因此在类中调用实例属性时都必须使用”self.实例属性名”的方式来调用，这样才能通过self参数来确定当前是哪个实例对象在调用</p>
<p>类变量与实例变量<br>1、在调用一个类中的属性时，Python会按照一定的顺序去查找这个属性：先在当前实例中找，有就用当前实例中的，如果没有就找类中的</p>
<p>例15：</p>
<p>class C:<br>    count &#x3D; 0<br>a &#x3D; C()<br>b &#x3D; C()<br>c &#x3D; C()<br>print(a.count,b.count,c.count)   #output:0,0,0</p>
<p>a.count +&#x3D; 10   #实例对象调用类属性<br>print(a.count,b.count,c.count)   #output:10,0,0</p>
<p>C.count +&#x3D; 100  #类对象调用类属性<br>print(a.count,b.count,c.count)   #output:10 100 100</p>
<p>#print(count)   #name ‘count’ is not defined，不能直接访问类属性，具体访问方法参考前面的属性访问<br>注：</p>
<p>1、对实例对象的count属性进行赋值后，就相当于覆盖了类对象C的count属性，如果没有赋值覆盖，那么引用的就是类对象的count属性<br>    ⑴通过”实例对象名.属性名”来覆盖类属性，只会影响到当前实例对象，不会影响到其他实例对象中的类属性<br>    ⑵通过”类名.属性名”来覆盖类属性，会影响到所有实例的类属性<br>    ⑶因此在类外调用类变量时，最好使用”实例对象名.属性名”，避免在重新赋值时影响到其他实例</p>
<p>2、类变量和实例变量的区别在于：类变量是所有对象共有，其中一个对象将它值改变，其他对象得到的就是改变后的结果；而实例变量则属对象私有，某一个对象将其值改变，不影响其他对象</p>
<p>3、获取一个实例对象的属性时，其属性名后面都是不需要加园括号的(不管是我们自己定义的类还是Python自带的类)；如果属性名后面带上了园括号，那么就变成了一个方法名了。这肯定是不对的。所以要分清楚调用的是类的属性还是类的方法<br>    ⑴不管是调用类方法还是属性，都是通过”.”点操作来实现的</p>
<p>类的使用<br>1、定义个类主要是将一些具有相同属性的数据、方法放到一个类中整合起来方便代码的管理。最终目的还是调用类中的属性和方法</p>
<p>2、在调用类中的方法或属性时都必须遵循一定的规则：调用类的属性或方法分类在类中调用、在类外调用。不同地方调用，调用的方式也会有一定的差距</p>
<p>3、调用类属性：<br>    ⑴类中访问类变量：类名. 类变量名<br>    ⑵类外访问类变量：类名.类变量名或实例名.类变量名</p>
<p>4、调用实例属性：<br>    ⑴类中访问实例变量：self.实例变量名<br>    ⑵类外访问实例变量：实例名.实例变量名</p>
<p>4、调用实例方法：<br>    ⑴类中访问实例方法：self.方法名(参数)或类名.方法名(self,参数)<br>    ⑵类外访问实例方法：实例名.方法名(参数)</p>
<p>例7：</p>
<p>class MyClass:<br>    “””一个简单的类实例”””<br>    i &#x3D; 12345#定义一个类属性</p>
<pre><code>def f(self):#定义一个实例方法
    print(MyClass.i) #类中调用类属性
    return &#39;hello world&#39;
 
def g(self):
    # 类中调用实例方法
    self.f()
    MyClass.f(self)
</code></pre>
<p>x &#x3D; MyClass()   # 实例化类</p>
<h1 id="访问类的属性和方法"><a href="#访问类的属性和方法" class="headerlink" title="访问类的属性和方法"></a>访问类的属性和方法</h1><p>print(“MyClass 类的属性 i 为：”, x.i) #类外调用类属性<br>print(“MyClass 类的属性 i 为：”, MyClass.i)<br>print(“MyClass 类的方法 f 输出为：”, x.f()) #类外调用实例方法<br>x.g()</p>
<p>“””<br>MyClass 类的属性 i 为： 12345<br>MyClass 类的属性 i 为： 12345<br>12345<br>MyClass 类的方法 f 输出为： hello world<br>12345<br>12345<br>“””<br>注：<br>1、在未实例化类时(x &#x3D; MyClass()前)，只是定义了对象的属性和方法，此时其还不是一个完整的对象，将定义的这些称为类(抽象类)。需要使用类来创建一个真正的对象，这个对象就叫做这个类的一个实例，也叫作实例对象(一个类可以有无数个实例)</p>
<p>2、创建一个对象也叫做类的实例化，即x &#x3D; MyClass()。(此时得到的x变量称为类的具体对象)。注意此时类名后面是跟着小括号的，这跟调用函数一样。另外赋值操作并不是必须的，但如果没有将创建好的实例对象赋值给一个变量，那这个对象就没办法使用，因为没有任何引用指向这个实例</p>
<p>3、如果要调用对象里的方法，就需要判断是在类中调用还是在类外调用：<br>    ⑴在类中调用实例方法：self.方法名(参数)或类名.方法名(self,参数)这个这里只是提一下，可以先不纠结<br>    ⑵在类外调用实例方法：实例对象名.方法名(参数)。这里的例子就是类外调用方法，只是说实例方法中没有定义参数。x.f()：x为实例对象名，f()为类中定义的实例方法</p>
<p>4、 x.i和MyClass.i都是用于调用类的属性，也就是我们前面所说的类变量；x.f()用于调用类的实例方法<br>    ⑴调用类属性可以使用：实例对象名.类属性名或类名.类属性名。虽然这两种方法都可以调用类属性，但是两者在调用使用还是有区别的，后面介绍</p>
<p> 5、类中定义方法的要求：在类中定义方法时，第一个参数必须是self，除第一个参数外，类的方法和普通的函数没什么区别，如可以使用默认参数，可变参数，关键字参数和命名关键字参数等<br>    ⑴虽然在定义方法时会定义一个self参数，但是不管是在类中或是在类外调用方法都不用传递self，其他参数正常传入<br>    ⑵self参数究竟是什么，这里也可以先不纠结，目前只需要知道定义一个实例方法时，第一个参数必须是self，但是在调用实例方法时，不需要传递这个self参数</p>
<p>6、类对象(抽象类)支持两种操作：即属性引用和实例化<br>    ⑴属性引用：方法为类名.类属性名(也可以实例对象名.类属性名)<br>    ⑵实例化：将一个抽象类实例化成一个实例对象(x &#x3D; MyClass() )。一个类可以实例化出无数个对象</p>
<p>7、类是一个抽象的概念，对象则是一个实际存在的东西。就像我们说的”狮子”，它只是一个抽象的东西，只有具体到狮子这种动物身上它才是实际存在的。在比如设计房子的图纸只能告诉你房子是什么样的，并不是真正的房子，只有通过钢筋水泥建造出来的房子才实际存在，才能住人。<br>    ⑴”造房子”这个过程就相当于是”实例化类’，一个抽象类只有实例化成一个具体的实例对象后，才会有意义(抽象类只有实例化后才能使用，才会有意义)</p>
<p>例8：</p>
<p>class Student():<br>    address &#x3D; “china”     #定义类变量address</p>
<pre><code>def __init__(self,name,age):    #定义实例变量age和name
    self.name = name
    self.age = age
 
def Info(self,score):#定义在方法中的变量(普通的变量：作用域为这个方法内)
    return &quot;学生来自于%s,名字为%s,年龄为%s,成绩为%s&quot;%(Student.address,self.name,self.age,score)
    #类中访问实例变量：self.实例变量名
    #类中访问类变量：类名.类变量名
    #类中访问方法中的普通变量：直接变量名(且该变量只能在这个方法中使用，不能再其他方法或类外调用)
</code></pre>
<p>student &#x3D; Student(“张三”,18)  #实例化类<br>print(student.name) #类外访问实例变量：实例名.实例属性名<br>print(Student.address)  #类外访问类变量：类名.类属性名(也可以实例名.类属性名)<br>print(student.Info(98)) #类外访问实例方法：实例名.方法名(参数)</p>
<p>#另一个实例对象<br>student_1 &#x3D; Student(“李四”,20)<br>print(student_1.name)<br>print(student_1.address)<br>print(student_1.Info(100))</p>
<p>“””<br>张三<br>china<br>学生来自于china,名字为张三,年龄为18,成绩为98<br>李四<br>china<br>学生来自于china,名字为李四,年龄为20,成绩为100<br>“””<br>注：<br>1、在Student类中，类属性address为所有实例所共享；实例属性name和age每个student的实例独有(每个实例有不同的name和age)<br>    ⑴类属性：实例对象student和student_1拥有一样的address属性<br>    ⑵实例属性：实例对象student和student_1拥有不一样的name和age属性(每个实例独有的属性)</p>
<p>属性绑定<br>1、在定义类时，通常我们说的定义属性，其实是分为两个方面的：类属性绑定、实例属性绑定(也就是定义类属性或实例属性)</p>
<p>2、用绑定这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用objname.attr &#x3D; attr_value的方式，为对象objname绑定属性attr。这分两种情况：<br>    ⑴若属性attr已经存在，绑定操作会将属性名指向新的对象<br>    ⑵若不存在，则为该对象添加新的属性，后面就可以引用新增属性</p>
<p>类属性绑定<br>Python作为动态语言，类对象和实例对象都可以在运行时绑定任意属性。因此，类属性的绑定发生在两个地方<br>    ⑴类定义时<br>    ⑵运行时任意阶段<br>例9：</p>
<p>class Dog:</p>
<pre><code>kind = &#39;canine&#39;
</code></pre>
<p>Dog.country &#x3D; ‘China’ #绑定一个新的类属性country</p>
<p>print(Dog.kind, ‘ - ‘, Dog.country)  # 输出: canine  -  China<br>del Dog.kind<br>print(Dog.kind, ‘ - ‘, Dog.country)  #由于上一行删除的kind属性，因此输出为AttributeError: type object ‘Dog’ has no attribute ‘kind’<br>注：<br>1、在类定义中，类属性的绑定并没有使用objname.attr &#x3D; attr_value的方式，这是一个特例，其实是等同于后面使用类名绑定属性的方式</p>
<p>2、因为是动态语言，所以可以在运行时增加属性，删除属性</p>
<p>实例属性绑定<br>与类属性绑定相同，实例属性绑定也发生在两个地方：类定义时、运行时任意阶段<br>例10：</p>
<p>class Dog:</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
</code></pre>
<p>dog &#x3D; Dog(‘Lily’, 3)<br>dog.fur_color &#x3D; ‘red’ #为实例对象dog增加一个fur_color属性</p>
<p>print(‘%s is %s years old, it has %s fur’ % (dog.name, dog.age, dog.fur_color))</p>
<p>#上面代码的输出结果为：Lily is 3 years old, it has red fur<br>注：<br>1、语句self.name &#x3D; name，self.age &#x3D; age以及后面的语句dog.fur_color &#x3D; ‘red’为实例dog增加三个属性name, age, fur_color。</p>
<p>2、Python类实例有两个特殊之处：<br>    ⑴__init__在实例化时执行<br>    ⑵Python实例对象调用方法时，会将实例对象作为第一个参数传递因此，__init__方法中的self就是实例对象本身，这里是dog</p>
<p>属性引用<br>属性的引用与直接访问名字不同，不涉及到作用域</p>
<p>类属性引用<br>类属性的引用，肯定是需要类对象的，属性分为两种：数据属性、函数属性。只是通常很少有引用类函数属性的需求</p>
<p>例11：数据属性引用很简单</p>
<p>class Dog:</p>
<pre><code>kind = &#39;canine&#39;
</code></pre>
<p>Dog.country &#x3D; ‘China’</p>
<p>print(Dog.kind, ‘ - ‘, Dog.country)  # output: canine  -  China</p>
<p>例11_1：</p>
<p>class Dog:<br>    kind &#x3D; ‘canine’</p>
<pre><code>def tell_kind(self):
    print(Dog.kind)
 
def info(self):
    return self.tell_kind() #类中调用实例方法
</code></pre>
<p>dog &#x3D; Dog()<br>dog.tell_kind()  # Output: canine<br>dog.info()  # Output: canine<br>实例属性引用<br>使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：<br>    ⑴总是先到实例对象中查找属性，再到类属性中查找属性<br>    ⑵属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象</p>
<p>例12：</p>
<p>class Dog:</p>
<pre><code>kind = &#39;canine&#39;
country = &#39;China&#39;
 
def __init__(self, name, age, country):
    self.name = name
    self.age = age
    self.country = country
</code></pre>
<p>dog &#x3D; Dog(‘Lily’, 3, ‘Britain’)<br>print(dog.name, dog.age, dog.kind, dog.country)   #output:Lily 3 canine Britain<br>注：<br>类对象Dog与实例对象dog均有属性country，按照规则，dog.country会引用到实例对象的属性；但实例对象dog没有属性kind，按照规则会引用类对象的属性</p>
<p>例13：</p>
<p>class Dog:</p>
<pre><code>kind = &#39;canine&#39;
country = &#39;China&#39;
 
def __init__(self, name, age, country):
    self.name = name
    self.age = age
    self.country = country
</code></pre>
<p>dog &#x3D; Dog(‘Lily’, 3, ‘Britain’)</p>
<p>print(dog.name, dog.age, dog.kind, dog.country)   # Lily 3 canine Britain<br>print(dog.<strong>dict</strong>)                               # {‘name’: ‘Lily’, ‘age’: 3, ‘country’: ‘Britain’}</p>
<p>dog.kind &#x3D; ‘feline’</p>
<p>print(dog.name, dog.age, dog.kind, dog.country)   # Lily 3 feline Britain<br>print(dog.<strong>dict</strong>)                               # {‘name’: ‘Lily’, ‘age’: 3, ‘country’: ‘Britain’, ‘kind’: ‘feline’}<br>print(Dog.kind)                                   # canine (没有改变类属性的指向)<br>注：<br>使用属性绑定语句dog.kind &#x3D; ‘feline’，按照规则，为实例对象dog增加了属性kind，后面使用dog.kind引用到实例对象的属性。这里不要以为会改变类属性Dog.kind的指向，实则是为实例对象新增属性，可以使用查看__dict__的方式证明这一点。</p>
<p>可变类属性引用<br>例14：</p>
<p>class Dog:</p>
<pre><code>tricks = []
 
def __init__(self, name):
    self.name = name
 
def add_trick(self, trick):
    self.tricks.append(trick)
</code></pre>
<p>d &#x3D; Dog(‘Fido’)<br>e &#x3D; Dog(‘Buddy’)<br>d.add_trick(‘roll over’)<br>e.add_trick(‘play dead’)<br>print(d.tricks)             output:# [‘roll over’, ‘play dead’]<br>注：</p>
<p>语句self.tricks.append(trick)并不是属性绑定语句，因此还是在类属性上修改可变对象</p>
<p>拓展<br>python中的self参数<br>例16：定义任意一个类:</p>
<p>class Student(object):<br>    pass<br>student &#x3D; Student()<br>注：<br>由于类起到模板的作用，因此，可以在创建实例的时候，把我们认为必须绑定的属性强制填写进去(绑定实例变量)。这里就用到Python当中的一个内置方法__init__方法，例如在Student类时，把name、score等属性绑上去</p>
<p>例16_1:</p>
<p>class Student(object):<br>    def <strong>init</strong>(self, name, score):<br>        self.name &#x3D; name<br>        self.score &#x3D; score</p>
<blockquote>
<blockquote>
<blockquote>
<p>student &#x3D; Student(“Hugh”, 99)<br>student.name<br>“Hugh”<br>student.score<br>99<br>注：        </p>
</blockquote>
</blockquote>
</blockquote>
<p>1、__init__方法的第一参数永远是self，表示创建的当前类实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身</p>
<p>2、有了__init__方法，在创建实例的时候(类实例化)，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器会自己把实例变量传进去</p>
<p>3、这里self就是指当前实例对象本身，self.name就是当前student实例对象的name属性，是该student实例对象独有的</p>
<p>4、name是外部传来的参数，不是Student类自带的。故，self.name &#x3D; name的意思就是把外部传来的参数name的值赋值给student当前实例对象自己的实例属性name(只是实例变量的名字和形参的一样而已)</p>
<p>例16_2：</p>
<p>class Student(object):<br>    def <strong>init</strong>(self, name_1, score_1):<br>        self.name &#x3D; name_1<br>        self.score &#x3D; score_1</p>
<p>student &#x3D; Student(“zh”,12)<br>print(student.name)<br>print(student.score)</p>
<p>“””<br>zh<br>12<br>“””<br>注：</p>
<p>这个例子中就特意把实例变量名和形参名定义成不一样了：self.name &#x3D; name_1<br>    ⑴name_1相当于是占位的形参，只是方便外部向类中传递参数(给实例变量传递值)，没有什么实际意义<br>    ⑵self.name中的name才是真正的实例变量了，是每个实例独有的属性<br>    ⑶只是说这两个变量表示的属性意义是一样的，因此更多的是将两个写成一样的名字。不然，有一个实例属性是”名字”，形参用的是”a”,实例属性用的是”name”，这样就看起来比较奇怪的，都表示的是”名字”却用了不一样的名字</p>
<p>例16_3：</p>
<p>class Person:<br>    def <strong>init</strong>(self, name, job&#x3D;None, pay&#x3D;10):<br>        self.name &#x3D; name<br>        self.job &#x3D; job<br>        self.pay &#x3D; pay</p>
<pre><code>def getRaise(self, percent):
    self.pay = int(self.pay * (1 + percent))
    return self.pay
</code></pre>
<p>p &#x3D; Person(“xiaoming”, “jixie”)<br>print(p.getRaise(0.8))  # output:18<br>注：<br>self是指当前被调用的对象，对的，就是上边刚被你实例化的对象p。当你需要调用当前对象(实例对象)的方法或者属性时，要用self.来进行调用(类中调用实例属性或方法：self.)</p>
<p>例17：</p>
<p>class CC:<br>    def setXY(self,x,y):<br>        self.x &#x3D; x<br>        self.y &#x3D; y<br>    def printXY(self):<br>        print(self.x ,self.y)</p>
<p>dd &#x3D; CC()<br>dd.setXY(4,5)<br>注：<br>self参数：当实例对象dd去调用setXY方法的时候，它传入的第一个参数就是dd，那么self.x &#x3D; 4，self.y &#x3D; 5也就相当于dd.x &#x3D; 4,dd.y &#x3D; 5,所以你在实例对象，甚至类对象中都看不到x和y，因为这两个属性是只属于实例对象dd的</p>
<p>例18：</p>
<p>class TestClass(object):<br>    val1 &#x3D; 100</p>
<pre><code>def __init__(self):
    self.val2 = 200
 
def fcn(self, val=400):
    val3 = 300
    
    self.val4 = val
    self.val5 = 500
</code></pre>
<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    inst &#x3D; TestClass()</p>
<pre><code>print(TestClass.val1)
print(inst.val1)
print(inst.val2)
#print(inst.val3)
#val3为局部变量，无法在函数为调用&#39;TestClass&#39; object has no attribute &#39;val3&#39;
#print(inst.val4)
#print(inst.val5)
</code></pre>
<p>注：<br>1、val1是类变量，可以由类名直接调用，也可以有对象来调用；</p>
<p>2、val2是实例变量，可以由类的对象来调用，这里可以看出成员变量一定是以self.的形式给出的，因为self的含义就是代表实例对象</p>
<p>3、val3既不是类变量也不是实例变量，它只是函数fcn内部的局部变量</p>
<p>4、val4和val5也都不是实例变量，虽是以self.给出，但并没有在构造函数中初始化</p>
<p>在实例方法中调用其他方法<br>例18：</p>
<p>class Dog():<br>    def <strong>init</strong>(self,name,age):<br>        self.name &#x3D; name<br>        self.age &#x3D; age</p>
<pre><code>def get_dog_information(self):
    dog_information = &quot;name is &#123;0&#125;,age is &#123;1&#125;&quot;.format(self.name,self.age)
    return dog_information
 
def get_dog_speak(self,love):
    dog_speak = self.get_dog_information() + love
    return dog_speak
</code></pre>
<p>dog &#x3D; Dog(“jake”,13)<br>print(dog.get_dog_speak(“swimming”))</p>
<p>#name is jake,age is 13swimming<br>注：在上面例子中<br>在get_dog_information()方法中调用了get_dog_information()，且get_dog_information()方法前加了self参数，该参数的意义与其他self的意思一样，都是代表实际本身</p>
<p>实例方法、类方法、静态方法<br>1、在面向对象的编程中，类属性可细分为类属性和实例属性一样，同样的，对于类中的方法也可以具体可划分为类方法、实例方法和静态方法</p>
<p>实例方法<br>1、在类编程中，一般情况下在类中定义的方法、函数默认都是实例方法</p>
<p>2、python的类编程中实例方法最大的特点就是最少要包含一个self参数，该参数必须定义，但调用时不需要传<br>    ⑴该self参数的作用是绑定调用此方法的实例对象(确定当前是哪个实例对象在调用方法、实例变量，Python会自动完成绑定)，类比C++中的this指针<br>    ⑵实例方法：方法中第一个参数都是self,实例变量、实例方法都需要要绑定self(self参数表示当前实例对象本身)<br>    ⑶调用实例方法：只能由实例对象调用</p>
<p>3、感觉经常用到的都是实例方法，所以前面主要介绍了实例方法。类方法和静态方法感觉不是经常用到，所以在这里补充下</p>
<p>例19：</p>
<p>class MyClass:<br>    className &#x3D; “三年2班”  # 定义一个类属性className</p>
<pre><code>def __init__(self,name):#定义一个实例变量name
    self.name = name
 
def BaseInfo(self):
    # 类中调用实例变量、类变量
    baseInfo = &quot;My name is %s,I am a student in %s&quot; % (self.name,MyClass.className)
    return baseInfo
 
def ComeFrom(self,country,*args): # 在方法中定义一些局部变量(只能在该方法中使用)
    # 类中调用类方法
    baseInfo = self.BaseInfo()
    comeFrom = baseInfo + &quot;.I comefrom &quot; + country + &quot;,&quot; + &quot;,&quot;.join(args)
    return comeFrom
</code></pre>
<p>x &#x3D; MyClass(“张三”)  # 实例化类</p>
<h1 id="类外访问实例方法"><a href="#类外访问实例方法" class="headerlink" title="类外访问实例方法"></a>类外访问实例方法</h1><p>print(x.ComeFrom(“china”,”chengdu”,”高新区”,”茂业中心”))</p>
<p>y &#x3D; MyClass(“李四”)  # 实例化类</p>
<h1 id="类外访问实例方法-1"><a href="#类外访问实例方法-1" class="headerlink" title="类外访问实例方法"></a>类外访问实例方法</h1><p>print(y .ComeFrom(“china”,”meishan”,”hongya”,”gaomiao”))</p>
<p>“””<br>My name is 张三,I am a student in 三年2班.I comefrom china,chengdu,高新区,茂业中心<br>My name is 李四,I am a student in 三年2班.I comefrom china,meishan,hongya,gaomiao<br>“””<br>类方法<br>1、Python中的类方法和实例方法类似，但类方法需要满足以下要求：<br>    ⑴类方法至少需要包含一个参数，与实例方法不同的是该参数并非self，而是python程序员约定俗成的参数：cls(cls表示当前类对象)<br>    ⑵Python会自动将类本身绑定到cls参数(非实例对象)，故在调用类方法时，无需显式为cls参数传递参数<br>    ⑶类方法需要使用修饰语句： ＠classmethod</p>
<p>2、调用类方法：类和实例对象都可以调用<br>    ⑴类方法推荐使用类名直接调用，当然也可以使用实例对象来调用(不推荐)</p>
<p>例20：</p>
<p>class CLanguage:<br>    #类构造方法，也属于实例方法<br>    def <strong>init</strong>(self):<br>        self.name &#x3D; “C语言中文网”<br>        self.add &#x3D; “<a href="http://c.biancheng.net&quot;/">http://c.biancheng.net&quot;</a><br>    #下面定义了一个类方法<br>    @classmethod<br>    def info(cls):<br>        print(“正在调用类方法”,cls)</p>
<p>#使用类名直接调用类方法<br>CLanguage.info()<br>#使用类对象调用类方法<br>clang &#x3D; CLanguage()<br>clang.info()</p>
<p>“””<br>正在调用类方法 &lt;class ‘__main__.CLanguage’&gt;<br>正在调用类方法 &lt;class ‘__main__.CLanguage’&gt;<br>“””<br>例20_1：</p>
<h1 id="文件在工程中的路径：Py-Project-x2F-zxc-py"><a href="#文件在工程中的路径：Py-Project-x2F-zxc-py" class="headerlink" title="文件在工程中的路径：Py_Project&#x2F;zxc.py"></a>文件在工程中的路径：Py_Project&#x2F;zxc.py</h1><p>class People():<br>    def <strong>init</strong>(self,name):<br>        self.name &#x3D; name</p>
<pre><code># 定义了一个类方法：类方法中是不能有实例变量的
@classmethod
def Age(self,age):
    age = &quot;age is %s&quot; % (age)
    return age
# 定义一个实例方法：可正常使用实例变量
def Info(self,age):
    info = &quot;name is %s,age is %s&quot; % (self.name,age)
    return info
</code></pre>
<h1 id="导入所需模块"><a href="#导入所需模块" class="headerlink" title="导入所需模块"></a>导入所需模块</h1><p>from Py_Project.zxc import People</p>
<p>#调用实例方法：在调用实例方法前必须实例化类<br>people &#x3D; People(“jack”)<br>print(people.Info(12))</p>
<h4 id="name-is-jack-age-is-12"><a href="#name-is-jack-age-is-12" class="headerlink" title="name is jack,age is 12"></a>name is jack,age is 12</h4><h3 id="导入所需模块-1"><a href="#导入所需模块-1" class="headerlink" title="导入所需模块"></a>导入所需模块</h3><p>from Py_Project.zxc import People</p>
<p>#调用类方法:通过实例名来调用类方法，也要先实例化类<br>people &#x3D; People(“jack”)<br>print(people.Age(13))</p>
<h4 id="调用类方法-通过类名来调用类方法，就不需要实例化类"><a href="#调用类方法-通过类名来调用类方法，就不需要实例化类" class="headerlink" title="调用类方法:通过类名来调用类方法，就不需要实例化类"></a>调用类方法:通过类名来调用类方法，就不需要实例化类</h4><p>print(People.Age(14))</p>
<p>注：</p>
<p>1、在一个类中可以同时定义实例方法、类方法、静态方法</p>
<p>2、类方法中是不能调用实例变量的，但是可以调用类变量：因为类方法是指向类的，而不是实例对象的</p>
<p>3、调用实例方法前必须实例化类；调用类方法就可以直接使用类名进行调用</p>
<p>静态方法<br>1、类中的静态方法，实际上就是大家众所周知的普通函数，存在的唯一区别是：<br>    ⑴类静态方法在类命名空间中定义，而函数则在程序的全局命名空间中定义</p>
<p>2、需要注意的是：<br>    ⑴类静态方法没有self、cls这样的特殊参数，故Python解释器不会对其包含的参数做任何类或对象的绑定<br>    ⑵类静态方法中无法调用任何类和对象的属性和方法，类静态方法与类的关系不大<br>    ⑶静态方法需要使用＠staticmethod修饰</p>
<p>3、静态方法的调用，既可以使用类名，也可以使用类对象</p>
<p>4、静态方法是类中的函数，不需要实例等<br>    ⑴静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系<br>    ⑵也就是说在静态方法中，不会涉及到类中的属性和方法的操作(静态方法中不能使用实例变量、类变量、实例方法等)<br>    ⑶可以理解为，静态方法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，便于使用和维护</p>
<p>例21：</p>
<p>class CLanguage:<br>    @staticmethod<br>    def info(name,add):<br>        print(name,add)<br>#使用类名直接调用静态方法<br>CLanguage.info(“C语言中文网”,”<a href="http://c.biancheng.net&quot;/">http://c.biancheng.net&quot;</a>)</p>
<p>#使用类对象调用静态方法<br>clang &#x3D; CLanguage()<br>clang.info(“Python教程”,”<a href="http://c.biancheng.net/python&quot;">http://c.biancheng.net/python&quot;</a>)</p>
<p>“””<br>C语言中文网 <a href="http://c.biancheng.net/">http://c.biancheng.net</a><br>Python教程 <a href="http://c.biancheng.net/python">http://c.biancheng.net/python</a><br>“””<br>注：<br>1、在Python类编程中，实例方法是必须要掌握的内容，类方法与类静态方法用得不多，因为两者完全可以使用函数来代替</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
</search>
